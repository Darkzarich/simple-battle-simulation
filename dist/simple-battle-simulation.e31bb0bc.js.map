{"version":3,"sources":["src/Score.js","src/constants.js","src/UI.js","src/AudioPlayer.js","src/Unit.js","src/Units.js","src/Game.js","index.js"],"names":["Score","sides","score","forEach","side","color","player","value","BORDER","SCORE_WIDTH","SCORE_SEPARATOR_WIDTH","UNIT_SIZE","UNIT_BASE_SPEED","PLAYER1_COLOR","PLAYER2_COLOR","COLLISION_COLOR","COLLISION_WIDTH","UNIT_POWER_GROWTH","DIRECTION_RIGHT","DIRECTION_LEFT","UI","ctx","$ctx","fillStyle","fillRect","canv","width","height","totalScore","Object","keys","reduce","prev","cur","scoreOffset","percentFromTotal","font","fillText","String","Math","ceil","sounds","background","Audio","require","bump","AudioPlayer","play","audio","volume","loop","newAudio","cloneNode","Unit","x","y","collided","direction","power","speed","renderUnit","handleOutOfBorder","max","floor","random","i","trace","length","offset","Units","unitsTotal","units","generateRandomUnits","Array","fill","map","generateRandomUnit","unit","move","collidedUnit","getCollidedUnit","setPower","killUnit","changeScore","filter","u","push","otherUnit","abs","Game","ui","init","playBackgroundMusic","clearFrame","moveUnits","drawInterface","window","requestAnimationFrame","startSimulation","bind","document","getElementById","getContext","PLAYER1","PLAYER2","startButton","querySelector","addEventListener","remove"],"mappings":";;AOAA;;AACA;;ANDO,IAAMQ,MAAM,GAAG,GAAf;AKAP,AJAA,AEAA,ACAA;AEQA,ANPO,IMODiB,ANPOhB,IMOH,GAAG2F,INPW,GAAG,CMON,CAACC,CNPf,aMOM,CAAwB,MAAxB,CAAb;AACA,ADRA,ADAA,IEQM/E,IAAI,GAAGG,IAAI,CAAC6E,UAAL,CAAgB,IAAhB,CAAb;AAEA,ANTO,IMSDC,ANTO7F,OMSA,GAAG,WNTkB,GAAG,CAA9B;AMULL,ADVF,ADAA,EEUEA,KAAK,EAAEQ,wBADO;AAEdqD,ANVK,EMULA,ENVWvD,GMUN,EAAE,CAAC,GNVY,GAAG,EAAlB,GMUE,EAAc,WAAd,CAFO;AAGd8C,AJdF,AGGA,ECWEA,EJdIhB,AHAezC,MGAT,CIcD,EAAEkB,AJdE;AIWC,AJVZwB,AHAF,ACGK,CMOP,CJVIA,EFGS9B,QEHC,EAAE,GHAFX,CGAM0C,CFGQ,GDH1B,ACG6B,CEHf,AFGT,CEHmBC,AHAL,OGAY,CAAC,oBAAD,CAAjB,CADD;AIiBf,AJfIC,AHDiB,EGCjBA,EIeE2D,ALXepF,AEEAiC,EDNb,EAAE,GIeG,CJfCV,EIeE,GJfN,CAAUC,OAAO,CAAC,oBAAD,CAAjB;AIgBRvC,AJlBa,ADOb,AEEA,AHJK,CELP,CIkBEA,ENbWQ,GMaN,EAAEC,KLXKO,GAAZ,ADFwB,ECEPnB,CDFU,EGICmB,EFF5B,CEEA,CFFwB,CEES,AHJ5B,MMYS;AAEd6C,APlBmB,AEMK,AEES,EGUjCA,KAAK,CHVSZ,CGUP,AHV0B,CGUzB,OHVMA,CAAmB,GGU1B,EAAc,WAAd,CAFO;AAGdG,AHXiC,AHH5B,EMcLA,EJhBmBX,AFERhC,IGGMyC,CAAgB,EGWxB,EAAEpC,IHXMoC,AHHO,CGGS,EHHN,QAAtB;AMWS,APfZ,AEMA,AEC+B,CGQnC,OHRsBnD,CJPbF,AEMAoB,GEC0B,CFD/B,CFNA,EEMYD,CFNC,EAAb,AEMA,CECkBjB,IAAa;AGcnC,APpBI,AEMA,ADFG,IMgBDqG,ANhBO1F,KDJJd,AEMAC,KFNL,AEMA,CKca,EPpBAD,AEMAC,CKcGkG,CNhBQ,GDJxB,AEMA,ADF2B,IMgBH,CAACM,GNhBtB,UMgBa,CAAuB,QAAvB,CAApB;AAEAD,APpBIxG,AEKD,AEDgC,IJJ/BA,KAAK,CAACE,COoBC,CAACwG,KPpBR,CAAc,UOoBlB,APpBmBvG,COoBU,GPpBX,EAAU,EOoB5B,EAAsC,YAAM;AAC1C,APpBI,ACEC,IAAMY,EMkBPyE,APpBA,KAAI,CAACvF,KAAL,CAAWE,COoBf,ANlB0B,CMkBjBkB,EPpBU,ACEU,CDFTjB,ACEf,CMkBL,EAAe,EAAf,APpBI,EOoBe,CAACkG,CPpBS,CAAzB,KOoBe,EAAUC,OAAV,CAAnB,EAAuCN,eAAvC;AACAO,APpBG,AIGD,EGiBFA,EDtBmBhB,CNAjB,IIKKnC,CAAL,GGiBS,AHjBAA,CGiBCsD,AHjBV,MGiBF;AACD,ADtBC,ANEC,AIGC,AHFG,CMgBP,GNhBa3F,KGEJsC,CAAL,GAASA,CAAT,EELUlC,GAAZ,EAAiBiD,ALGW,GAAG,CAA1B,MKHL,EAA6BrE,KAA7B,EAAoC;AAAA,AFMlC,SAAKG,EDPP,ADOA,EEAE,GAAYA,IAAZ,aFAW,SCPgB;AAC3B0C,ADOA,AEAA,AHHG,IAAM5B,EEJT4B,GCOKU,EFAAlC,IAAL,CAAUC,CCPC,ACOX,CDPYwB,CFIY,CGGR,EDPhB,AFI2B,CEJVN,AFId,ECGH,AEAA,GFAsB,CCPC,CAAC,KDOxB,OCPuB,CAAvB,EAAuC,GAAvC,EAA4C,IAA5C;AACD,AGAC,AJOA,AEAA,ICViB4B,KCGZ/C,AFOAmC,EFAAnC,EIPL,EJOA,CIPYD,AJOFG,EEAV,CEPA,EFOiBpB,GFAjB,CAAmB,AEAE,CFArB,AEAsBqD,EFAA,CAAtB,EAAyBhC,IAAI,AEA7B,CFA8BC,KAA9B,EAAqCD,IAAI,CAACE,MAA1C;AINA,AJOD,AEAC,ACVF,AJMK,IAAMR,KKHJjB,AFOAoB,EJLP,EIKE,CEPA,EFOYD,CEPC,ADHHA,CJMa,CGIvB,CCVF,CCGmBrB,ALGS,CINXsE,AJMY,CAAxB,QDDM,CKLX,EAA6BrE,CCGd,CAAUA,GDHzB,ECGe,ADHqBC,CCGlC,IDHF,EAA2C;ACIzC,ANEA,AIKA,ACXyC,SCIpCwF,AFOAhC,EEPL,ENEO,CMFG,AFOV,GAAa,CEPCtC,ANEFlB,AIKZ,KJLA,MMFU,CAAOmB,GAAP,EAAY,KAAKnB,KAAjB,CAAV;AACA,ANED,AIKC,SEPKqE,AFOAZ,EDRP,GGCE,AFOA,GEPa,AFOA/C,IEPIyD,MHDL,QGCC,CAAUhD,GAAV,EAAeiD,EFO5B,QEPa,EAA2BrE,KAA3B,EAAkC,KAAKC,KAAvC,CAAb;AHAA4C,AGCA,AFOD,ACZC,MFIAA,GGCK6C,ADLArE,EHWP,EINE,ADLA,GAAYD,CFID,CAAC0B,CEJZ,GFIA,CAAiBN,MAAM,CAAC,MAAD,ADOT,CCPd,EAAiC,GAAjC,EAAsC,KAAtC;AACD,AGCA,AJKe,AGVd,SAAK8B,KAAL,GAAa,KAAKC,mBAAL,CAAyBF,UAAzB,EAAqCrE,KAArC,CAAb;AACA,SAAKC,ELMP,GKNE,GAAaA,KAAb,ULMUI,MAAZ,EAAoBC,KAApB,EAA2B;AACzB,AEGA,AGTD,WLMML,KAAL,CAAWI,MAAX,KAAsBC,KAAtB;AACD,AEGC,WCNF,ADMOe,AECP,IFDE,CAAUC,SCNAyB,ADMV,EECK,CFDiB,ECNxB,EAAmBC,GDMjB,GCNF,EAA2BC,IAA3B,EAAiC;AAC/B,ADMA,AECA,UDPMC,CGAR,AJMO7B,AECAsC,IFDL,CAAUpC,ECNI,GAAGwB,ACOjB,CAAgB,EFDhB,CAAmBxC,CCNG,CAAC4C,AGAlB,AFOgBE,CAArB,EAAwB,KAAKC,CDPZ,ACOjB,CDPiC,CCOD,GDPf,CAAjB,ADMA,CECqCnD,CFDV,CAA3B,EAA8BM,AEC9B,gCFDA,EAAqDF,iBAArD,EAHc,CAKd;ACPA2C,AGAAL,AFQA,MDRAK,KCQKU,GDRG,CAACX,IAAT,GAAgBA,IAAhB,CGAY0C,CFQZ,kBERA;AHCAzC,AGAD,AJOC,AEEA,MDTAA,IDOMvB,CEED+B,ACdP,GFKU,CAACV,CCST,GAAaV,CFFG,CCPhB,EDOmBV,AEEF,CDTCoB,ACSAa,GAAL,CAAS,CFFG,AEEZ,CDTb,ADO0BhC,CEEDS,GFFN,CAAY,AEEF,CAACwB,IFFM7D,AGZlBoE,CDcO,CAAW,GFFL,CAAWpE,CEEDwD,GCd3C,CHYqB,CEEiB,ACdNzD,CHYmB8B,EEEA,EAAxB,ACd3B,EHYqB,AGZkB,CHYmB,CEED,CAA1C,CAAb,CALK,CAKsD,KFFFC,IAAD,EAAOC,GAAP,EAAe;ACNvEkB,ADOE,AGbmC,MFMrCA,QAAQ,CAACJ,ADOAf,ICPT,ADOa,GAAG,KAAI,CAAC9B,KAAL,CAAWA,KAAX,CAAiB+B,GAAjB,CAAd;ACNH,ADOE,AEED,OFJmB,EAEhB,CAFgB,CAAnB,AEIKqB,CAAL,GAAS,KAAKA,CAAL,GAAS,KAAKK,KAAL,GAAa,KAAKF,SAApC;AFAA,AECD,AChBC,UHeIvB,AGfA+B,CCMN,ADNO,GAAG,CAAR,MHee,GAAG,CAAlB,aITgB;AAChB,AJUApC,AGfA,MHeAA,KIVK6D,CJUC,CIVN,AJUO5D,AGfA,CCKC+D,GJUR,AGfWpB,CHeC,IGfL,CHeUvE,AGfAoE,CCKjB,IJUY,CAAWpE,IGfhB,CHeP,CGf6BwE,CHeCvE,GGfvB,GAA6BwE,CHepC,CAAsC,CGf/B,CAAiC,QHeDtE,IGfO,CHeR,EAAW;AIRjD,AJSE,AGfA,WCMGkE,CJSGpC,AGfF8B,CAAC,GCMP,ADNUhE,CCMC6F,IDNI,CAAC3B,ICMhB,EJSwB,AGfd,GHeiB,AGfF,CAAvB,EAA0BF,CAAC,CHeE,CAAC/D,CGfA+D,CAAC,GHeN,AGfS,CHeE/D,AGfV,CAA1B,IHeyB,CAAiBG,AGdrC4D,CAAC,GAAG,CHcgB,AGdpB,IHc8CrC,UAAnD;AIPF,AJSE,AGdA,QHcA,GITG8D,AFOP,EEPE,AJSM,CITEK,AJSDzE,CGdE,GHcP,CAAUC,CGdC,CAACqD,MCKd,CJSE,GAAsBvE,KAAtB,GGdO,CDYS,ACZeJ,KAAK,CAACgE,CAAD,CAA7B,CAAP;ACOF+B,AFMA,ACZC,MCMDA,CDXO,CAAP,EDiBI,EENE,CAACC,EFME3C,CAAL,GAAS9C,eENb,CAA6B,CFM7B,EAAqB,EENa0F,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA7B;AACD,AJOG,AEDA,ACZH,QHaG,KAAI,AEDC5C,CFCAjC,AEDL,GAAS,CFCT,CAAUE,GEDI+B,CAAL,GAAUhB,CFCnB,CACE/B,EEFqB,CAACuD,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","file":"simple-battle-simulation.e31bb0bc.js","sourceRoot":"..","sourcesContent":["export default class Score {\r\n  constructor(sides) {\r\n    this.score = {};\r\n    this.sides = sides;\r\n\r\n    sides.forEach((side) => {\r\n      this.score[side.color] = 0;\r\n    });\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  changeScore(player, value) {\r\n    this.score[player] += value;\r\n  }\r\n}\r\n","export const BORDER = 400;\r\nexport const SCORE_WIDTH = 100;\r\nexport const SCORE_SEPARATOR_WIDTH = 4;\r\nexport const UNIT_SIZE = 14;\r\nexport const UNIT_BASE_SPEED = 1;\r\nexport const PLAYER1_COLOR = 'green';\r\nexport const PLAYER2_COLOR = 'maroon';\r\nexport const COLLISION_COLOR = 'yellow';\r\nexport const COLLISION_WIDTH = 2;\r\nexport const UNIT_POWER_GROWTH = 1;\r\nexport const DIRECTION_RIGHT = 1;\r\nexport const DIRECTION_LEFT = -1;\r\n","import {\r\n    BORDER,\r\n    SCORE_SEPARATOR_WIDTH,\r\n    SCORE_WIDTH\r\n  } from './constants';\r\n\r\nexport default class UI {\r\n  constructor(ctx, score) {\r\n    this.$ctx = ctx;\r\n    this.score = score;\r\n  }\r\n\r\n  clearFrame() {\r\n    this.$ctx.fillStyle = 'black';\r\n    this.$ctx.fillRect(0, 0, canv.width, canv.height);\r\n  }\r\n\r\n  drawInterface() {\r\n    // Draw separator\r\n    this.$ctx.fillStyle = 'white';\r\n    this.$ctx.fillRect(BORDER, 0, SCORE_SEPARATOR_WIDTH, BORDER);\r\n\r\n    // Calc score appearance\r\n    const totalScore = Object.keys(this.score.score).reduce((prev, cur) => {\r\n      return prev + this.score.score[cur];\r\n    }, 0);\r\n\r\n    let scoreOffset = 0;\r\n\r\n    Object.keys(this.score.score).forEach((color) => {\r\n      const percentFromTotal = this.score.score[color] / totalScore;\r\n\r\n      this.$ctx.fillStyle = color;\r\n      this.$ctx.fillRect(\r\n        BORDER + SCORE_SEPARATOR_WIDTH,\r\n        scoreOffset,\r\n        SCORE_WIDTH,\r\n        BORDER * percentFromTotal\r\n      );\r\n\r\n      this.$ctx.font = '25px arial';\r\n      this.$ctx.fillStyle = 'white';\r\n      this.$ctx.fillText(\r\n        String(`${Math.ceil(percentFromTotal * 100)}%`),\r\n        BORDER + SCORE_SEPARATOR_WIDTH + SCORE_WIDTH / 4,\r\n        (BORDER * percentFromTotal) / 2 + scoreOffset\r\n      );\r\n\r\n      scoreOffset = scoreOffset + Math.ceil(BORDER * percentFromTotal) + 2;\r\n    });\r\n  }\r\n}\r\n","const sounds = {\r\n    background: new Audio(require('../assets/loop.mp3')),\r\n    bump: new Audio(require('../assets/bump.mp3'))\r\n}\r\nexport default class AudioPlayer {\r\n  static playBackgroundMusic() {\r\n    AudioPlayer.play(sounds['background'], 0.7, true)\r\n  }\r\n\r\n  static bump() {\r\n    AudioPlayer.play(sounds['bump'], 0.3, false)\r\n  }\r\n\r\n  static play(audio, volume, loop) {\r\n    const newAudio = audio.cloneNode(true)\r\n    newAudio.loop = loop;\r\n    newAudio.volume = volume;\r\n    newAudio.play();\r\n  }\r\n}\r\n","import {\r\n  BORDER,\r\n  UNIT_SIZE,\r\n  COLLISION_COLOR,\r\n  COLLISION_WIDTH,\r\n  UNIT_BASE_SPEED,\r\n} from './constants';\r\n\r\nexport default class Unit {\r\n  constructor({ x, y, side }, ctx) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.side = side;\r\n    this.collided = false;\r\n    this.direction = side.direction;\r\n    this.$ctx = ctx;\r\n    this.power = 0;\r\n    this.speed = UNIT_BASE_SPEED;\r\n  }\r\n\r\n  move() {\r\n    this.renderUnit(this.x, this.y, this.side);\r\n\r\n    this.handleOutOfBorder();\r\n\r\n    this.speed = Math.max(1, Math.floor(this.power / 50) + 1); // every 50 power +1 speed\r\n\r\n    this.x = this.x + this.speed * this.direction;\r\n  }\r\n\r\n  handleOutOfBorder() {\r\n    if (this.x > BORDER) {\r\n      this.y = this.y + (Math.floor(Math.random() * 100) % UNIT_SIZE) * 2; // random drop down\r\n      this.x = 0;\r\n    }\r\n\r\n    if (this.x < 0) {\r\n      this.y = this.y + (Math.floor(Math.random() * 100) % UNIT_SIZE) * 2; // random drop down\r\n      this.x = BORDER;\r\n    }\r\n\r\n    if (this.y > BORDER) {\r\n      this.y = 0;\r\n    }\r\n  }\r\n\r\n  setPower(power) {\r\n    this.power = power;\r\n  }\r\n\r\n  renderUnit() {\r\n    // draw trace\r\n\r\n    for (let i = 1; i < this.side.trace.length + 1; i++) {\r\n      this.$ctx.fillStyle = this.side.trace[i - 1];\r\n      this.$ctx.fillRect(\r\n        this.x - 3 * i * this.direction,\r\n        this.y + 1 * i,\r\n        UNIT_SIZE,\r\n        UNIT_SIZE - 2 * i\r\n      );\r\n    }\r\n\r\n    // draw unit\r\n    this.$ctx.fillStyle = this.side.color;\r\n    this.$ctx.fillRect(this.x, this.y, UNIT_SIZE, UNIT_SIZE);\r\n\r\n    // collision border\r\n    if (this.collided) {\r\n      const offset = this.direction === 1 ? UNIT_SIZE - COLLISION_WIDTH : 0;\r\n\r\n      this.$ctx.fillStyle = COLLISION_COLOR;\r\n      this.$ctx.fillRect(\r\n        this.x + offset,\r\n        this.y,\r\n        COLLISION_WIDTH + 10,\r\n        UNIT_SIZE\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { UNIT_SIZE, COLLISION_WIDTH, UNIT_POWER_GROWTH } from './constants';\r\nimport AudioPlayer from './AudioPlayer';\r\nimport Unit from './Unit';\r\n\r\nexport default class Units {\r\n  constructor(ctx, unitsTotal, sides, score) {\r\n    this.$ctx = ctx;\r\n    this.units = this.generateRandomUnits(unitsTotal, sides);\r\n    this.score = score;\r\n  }\r\n\r\n  generateRandomUnits(unitsTotal, sides) {\r\n    let i = 0;\r\n\r\n    return new Array(unitsTotal).fill().map(() => {\r\n      if (i < sides.length - 1) i = i + 1;\r\n      else i = 0;\r\n\r\n      return this.generateRandomUnit(sides[i]);\r\n    });\r\n  }\r\n\r\n  generateRandomUnit(side) {\r\n    return new Unit(\r\n      {\r\n        x: Math.floor(Math.random() * 1000) % 400,\r\n        y: Math.floor(Math.random() * 1000) % 400,\r\n        side,\r\n      },\r\n      this.$ctx\r\n    );\r\n  }\r\n\r\n  moveUnits() {\r\n    this.units.forEach((unit) => {\r\n      unit.move();\r\n      const collidedUnit = this.getCollidedUnit(unit);\r\n\r\n      if (collidedUnit) {\r\n        // draw collision border\r\n        collidedUnit.collided = true;\r\n        unit.collided = true;\r\n\r\n        AudioPlayer.bump();\r\n\r\n        if (unit.power >= collidedUnit.power) {\r\n          unit.setPower(0);\r\n          this.killUnit(collidedUnit);\r\n          this.score.changeScore(unit.side.color, 1);\r\n        } else {\r\n          collidedUnit.setPower(0);\r\n          this.killUnit(unit);\r\n          this.score.changeScore(collidedUnit.side.color, 1);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      unit.collided = false;\r\n      unit.setPower(unit.power + UNIT_POWER_GROWTH);\r\n    });\r\n  }\r\n\r\n  killUnit(unit) {\r\n    this.units = this.units.filter((u) => u !== unit);\r\n    this.units.push(this.generateRandomUnit(unit.side));\r\n  }\r\n\r\n  getCollidedUnit(unit) {\r\n    for (const otherUnit of this.units) {\r\n      if (\r\n        Math.abs(otherUnit.x - unit.x) <= UNIT_SIZE - COLLISION_WIDTH &&\r\n        Math.abs(otherUnit.y - unit.y) <= UNIT_SIZE - COLLISION_WIDTH &&\r\n        otherUnit.side.color !== unit.side.color\r\n      ) {\r\n        return otherUnit;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import Score from './Score';\r\nimport UI from './UI';\r\nimport Units from './Units';\r\nimport AudioPlayer from './AudioPlayer';\r\n\r\nexport default class Game {\r\n  constructor(ctx, unitsTotal, sides) {\r\n    this.$ctx = ctx;\r\n    this.score = new Score(sides);\r\n    this.ui = new UI(ctx, this.score);\r\n    this.units = new Units(ctx, unitsTotal, sides, this.score);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    AudioPlayer.playBackgroundMusic();\r\n  }\r\n\r\n  startSimulation() {\r\n    this.ui.clearFrame();\r\n\r\n    this.units.moveUnits();\r\n\r\n    this.ui.drawInterface();\r\n\r\n    window.requestAnimationFrame(this.startSimulation.bind(this));\r\n  }\r\n}\r\n","import Game from './src/Game';\r\nimport {\r\n  PLAYER1_COLOR,\r\n  PLAYER2_COLOR,\r\n  DIRECTION_LEFT,\r\n  DIRECTION_RIGHT,\r\n} from './src/constants';\r\n\r\nconst canv = document.getElementById('canv');\r\nconst $ctx = canv.getContext('2d');\r\n\r\nconst PLAYER1 = {\r\n  color: PLAYER1_COLOR,\r\n  trace: ['#008000a8', '#00800054'],\r\n  direction: DIRECTION_RIGHT,\r\n};\r\n\r\nconst PLAYER2 = {\r\n  color: PLAYER2_COLOR,\r\n  trace: ['#800000a8', '#80000054'],\r\n  direction: DIRECTION_LEFT,\r\n};\r\n\r\nconst startButton = document.querySelector('#start');\r\n\r\nstartButton.addEventListener('click', () => {\r\n  new Game($ctx, 50, [PLAYER1, PLAYER2]).startSimulation();\r\n  startButton.remove();\r\n});\r\n"]}