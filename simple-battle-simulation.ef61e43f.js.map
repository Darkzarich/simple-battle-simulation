{"version":3,"sources":["src/Score.js","src/constants.js","src/UI.js","src/AudioPlayer.js","src/Unit.js","src/Units.js","src/Game.js","index.js"],"names":["Score","sides","score","forEach","side","color","player","value","BORDER","SCORE_WIDTH","SCORE_SEPARATOR_WIDTH","UNIT_SIZE","UNIT_BASE_SPEED","PLAYER1_COLOR","PLAYER2_COLOR","COLLISION_COLOR","COLLISION_WIDTH","UNIT_POWER_GROWTH","DIRECTION_RIGHT","DIRECTION_LEFT","UI","ctx","$ctx","fillStyle","fillRect","canv","width","height","totalScore","Object","keys","reduce","prev","cur","scoreOffset","percentFromTotal","font","fillText","String","Math","ceil","MAX_OVERLAY","sounds","background","require","bump","soundManager","Audio","Array","fill","map","audioElement","busy","AudioPlayer","play","audio","volume","loop","findFree","find","el","addEventListener","Unit","x","y","collided","direction","power","speed","renderUnit","handleOutOfBorder","max","floor","random","i","trace","length","offset","Units","unitsTotal","units","generateRandomUnits","generateRandomUnit","unit","move","collidedUnit","getCollidedUnit","setPower","killUnit","changeScore","filter","u","push","otherUnit","abs","Game","ui","init","playBackgroundMusic","clearFrame","moveUnits","drawInterface","window","requestAnimationFrame","startSimulation","bind","document","getElementById","getContext","PLAYER1","PLAYER2","startButton","querySelector","remove"],"mappings":"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","file":"simple-battle-simulation.ef61e43f.js","sourceRoot":"..","sourcesContent":["export default class Score {\r\n  constructor(sides) {\r\n    this.score = {};\r\n    this.sides = sides;\r\n\r\n    sides.forEach((side) => {\r\n      this.score[side.color] = 0;\r\n    });\r\n  }\r\n\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  changeScore(player, value) {\r\n    this.score[player] += value;\r\n  }\r\n}\r\n","export const BORDER = 400;\r\nexport const SCORE_WIDTH = 100;\r\nexport const SCORE_SEPARATOR_WIDTH = 4;\r\nexport const UNIT_SIZE = 14;\r\nexport const UNIT_BASE_SPEED = 1;\r\nexport const PLAYER1_COLOR = 'green';\r\nexport const PLAYER2_COLOR = 'maroon';\r\nexport const COLLISION_COLOR = 'yellow';\r\nexport const COLLISION_WIDTH = 2;\r\nexport const UNIT_POWER_GROWTH = 1;\r\nexport const DIRECTION_RIGHT = 1;\r\nexport const DIRECTION_LEFT = -1;\r\n","import {\r\n    BORDER,\r\n    SCORE_SEPARATOR_WIDTH,\r\n    SCORE_WIDTH\r\n  } from './constants';\r\n\r\nexport default class UI {\r\n  constructor(ctx, score) {\r\n    this.$ctx = ctx;\r\n    this.score = score;\r\n  }\r\n\r\n  clearFrame() {\r\n    this.$ctx.fillStyle = 'black';\r\n    this.$ctx.fillRect(0, 0, canv.width, canv.height);\r\n  }\r\n\r\n  drawInterface() {\r\n    // Draw separator\r\n    this.$ctx.fillStyle = 'white';\r\n    this.$ctx.fillRect(BORDER, 0, SCORE_SEPARATOR_WIDTH, BORDER);\r\n\r\n    // Calc score appearance\r\n    const totalScore = Object.keys(this.score.score).reduce((prev, cur) => {\r\n      return prev + this.score.score[cur];\r\n    }, 0);\r\n\r\n    let scoreOffset = 0;\r\n\r\n    Object.keys(this.score.score).forEach((color) => {\r\n      const percentFromTotal = this.score.score[color] / totalScore;\r\n\r\n      this.$ctx.fillStyle = color;\r\n      this.$ctx.fillRect(\r\n        BORDER + SCORE_SEPARATOR_WIDTH,\r\n        scoreOffset,\r\n        SCORE_WIDTH,\r\n        BORDER * percentFromTotal\r\n      );\r\n\r\n      this.$ctx.font = '25px arial';\r\n      this.$ctx.fillStyle = 'white';\r\n      this.$ctx.fillText(\r\n        String(`${Math.ceil(percentFromTotal * 100)}%`),\r\n        BORDER + SCORE_SEPARATOR_WIDTH + SCORE_WIDTH / 4,\r\n        (BORDER * percentFromTotal) / 2 + scoreOffset\r\n      );\r\n\r\n      scoreOffset = scoreOffset + Math.ceil(BORDER * percentFromTotal) + 2;\r\n    });\r\n  }\r\n}\r\n","const MAX_OVERLAY = 30;\r\n\r\n// sounds\r\nconst sounds = {\r\n  background: require('../assets/loop.mp3'),\r\n  bump: require('../assets/bump.mp3'),\r\n};\r\n\r\nconst soundManager = {\r\n  background: new Audio(sounds.background),\r\n  bump: Array(MAX_OVERLAY)\r\n    .fill()\r\n    .map(() => ({\r\n      audioElement: new Audio(sounds.bump),\r\n      busy: false,\r\n    })),\r\n};\r\n\r\nexport default class AudioPlayer {\r\n  static playBackgroundMusic() {\r\n    AudioPlayer.play(soundManager['background'], 0.7, true);\r\n  }\r\n\r\n  static bump() {\r\n    AudioPlayer.play(soundManager['bump'], 0.2, false);\r\n  }\r\n\r\n  static play(audio, volume, loop) {\r\n    if (audio instanceof Array) {\r\n      const findFree = audio.find((el) => !el.busy);\r\n\r\n      if (findFree) {\r\n        findFree.busy = true;\r\n        findFree.audioElement.loop = loop;\r\n        findFree.audioElement.volume = volume;\r\n        findFree.audioElement.play();\r\n        findFree.audioElement.addEventListener('ended', () => {\r\n          findFree.busy = false;\r\n        });\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    audio.loop = loop;\r\n    audio.volume = volume;\r\n    audio.play();\r\n  }\r\n}\r\n","import {\r\n  BORDER,\r\n  UNIT_SIZE,\r\n  COLLISION_COLOR,\r\n  COLLISION_WIDTH,\r\n  UNIT_BASE_SPEED,\r\n} from './constants';\r\n\r\nexport default class Unit {\r\n  constructor({ x, y, side }, ctx) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.side = side;\r\n    this.collided = false;\r\n    this.direction = side.direction;\r\n    this.$ctx = ctx;\r\n    this.power = 0;\r\n    this.speed = UNIT_BASE_SPEED;\r\n  }\r\n\r\n  move() {\r\n    this.renderUnit(this.x, this.y, this.side);\r\n\r\n    this.handleOutOfBorder();\r\n\r\n    this.speed = Math.max(1, Math.floor(this.power / 50) + 1); // every 50 power +1 speed\r\n\r\n    this.x = this.x + this.speed * this.direction;\r\n  }\r\n\r\n  handleOutOfBorder() {\r\n    if (this.x > BORDER) {\r\n      this.y = this.y + (Math.floor(Math.random() * 100) % UNIT_SIZE) * 2; // random drop down\r\n      this.x = 0;\r\n    }\r\n\r\n    if (this.x < 0) {\r\n      this.y = this.y + (Math.floor(Math.random() * 100) % UNIT_SIZE) * 2; // random drop down\r\n      this.x = BORDER;\r\n    }\r\n\r\n    if (this.y > BORDER) {\r\n      this.y = 0;\r\n    }\r\n  }\r\n\r\n  setPower(power) {\r\n    this.power = power;\r\n  }\r\n\r\n  renderUnit() {\r\n    // draw trace\r\n\r\n    for (let i = 1; i < this.side.trace.length + 1; i++) {\r\n      this.$ctx.fillStyle = this.side.trace[i - 1];\r\n      this.$ctx.fillRect(\r\n        this.x - 3 * i * this.direction,\r\n        this.y + 1 * i,\r\n        UNIT_SIZE,\r\n        UNIT_SIZE - 2 * i\r\n      );\r\n    }\r\n\r\n    // draw unit\r\n    this.$ctx.fillStyle = this.side.color;\r\n    this.$ctx.fillRect(this.x, this.y, UNIT_SIZE, UNIT_SIZE);\r\n\r\n    // collision border\r\n    if (this.collided) {\r\n      const offset = this.direction === 1 ? UNIT_SIZE - COLLISION_WIDTH : 0;\r\n\r\n      this.$ctx.fillStyle = COLLISION_COLOR;\r\n      this.$ctx.fillRect(\r\n        this.x + offset,\r\n        this.y,\r\n        COLLISION_WIDTH + 10,\r\n        UNIT_SIZE\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { UNIT_SIZE, COLLISION_WIDTH, UNIT_POWER_GROWTH } from './constants';\r\nimport AudioPlayer from './AudioPlayer';\r\nimport Unit from './Unit';\r\n\r\nexport default class Units {\r\n  constructor(ctx, unitsTotal, sides, score) {\r\n    this.$ctx = ctx;\r\n    this.units = this.generateRandomUnits(unitsTotal, sides);\r\n    this.score = score;\r\n  }\r\n\r\n  generateRandomUnits(unitsTotal, sides) {\r\n    let i = 0;\r\n\r\n    return new Array(unitsTotal).fill().map(() => {\r\n      if (i < sides.length - 1) i = i + 1;\r\n      else i = 0;\r\n\r\n      return this.generateRandomUnit(sides[i]);\r\n    });\r\n  }\r\n\r\n  generateRandomUnit(side) {\r\n    return new Unit(\r\n      {\r\n        x: Math.floor(Math.random() * 1000) % 400,\r\n        y: Math.floor(Math.random() * 1000) % 400,\r\n        side,\r\n      },\r\n      this.$ctx\r\n    );\r\n  }\r\n\r\n  moveUnits() {\r\n    this.units.forEach((unit) => {\r\n      unit.move();\r\n      const collidedUnit = this.getCollidedUnit(unit);\r\n\r\n      if (collidedUnit) {\r\n        // draw collision border\r\n        collidedUnit.collided = true;\r\n        unit.collided = true;\r\n\r\n        AudioPlayer.bump();\r\n\r\n        if (unit.power >= collidedUnit.power) {\r\n          unit.setPower(0);\r\n          this.killUnit(collidedUnit);\r\n          this.score.changeScore(unit.side.color, 1);\r\n        } else {\r\n          collidedUnit.setPower(0);\r\n          this.killUnit(unit);\r\n          this.score.changeScore(collidedUnit.side.color, 1);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      unit.collided = false;\r\n      unit.setPower(unit.power + UNIT_POWER_GROWTH);\r\n    });\r\n  }\r\n\r\n  killUnit(unit) {\r\n    this.units = this.units.filter((u) => u !== unit);\r\n    this.units.push(this.generateRandomUnit(unit.side));\r\n  }\r\n\r\n  getCollidedUnit(unit) {\r\n    for (const otherUnit of this.units) {\r\n      if (\r\n        Math.abs(otherUnit.x - unit.x) <= UNIT_SIZE - COLLISION_WIDTH &&\r\n        Math.abs(otherUnit.y - unit.y) <= UNIT_SIZE - COLLISION_WIDTH &&\r\n        otherUnit.side.color !== unit.side.color\r\n      ) {\r\n        return otherUnit;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import Score from './Score';\r\nimport UI from './UI';\r\nimport Units from './Units';\r\nimport AudioPlayer from './AudioPlayer';\r\n\r\nexport default class Game {\r\n  constructor(ctx, unitsTotal, sides) {\r\n    this.$ctx = ctx;\r\n    this.score = new Score(sides);\r\n    this.ui = new UI(ctx, this.score);\r\n    this.units = new Units(ctx, unitsTotal, sides, this.score);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    AudioPlayer.playBackgroundMusic();\r\n  }\r\n\r\n  startSimulation() {\r\n    this.ui.clearFrame();\r\n\r\n    this.units.moveUnits();\r\n\r\n    this.ui.drawInterface();\r\n\r\n    window.requestAnimationFrame(this.startSimulation.bind(this));\r\n  }\r\n}\r\n","import Game from './src/Game';\r\nimport {\r\n  PLAYER1_COLOR,\r\n  PLAYER2_COLOR,\r\n  DIRECTION_LEFT,\r\n  DIRECTION_RIGHT,\r\n  BORDER,\r\n  SCORE_WIDTH\r\n} from './src/constants';\r\n\r\nconst canv = document.getElementById('canv');\r\nconst $ctx = canv.getContext('2d');\r\n\r\ncanv.height = BORDER\r\ncanv.width = BORDER + SCORE_WIDTH\r\n\r\nconst PLAYER1 = {\r\n  color: PLAYER1_COLOR,\r\n  trace: ['#008000a8', '#00800054'],\r\n  direction: DIRECTION_RIGHT,\r\n};\r\n\r\nconst PLAYER2 = {\r\n  color: PLAYER2_COLOR,\r\n  trace: ['#800000a8', '#80000054'],\r\n  direction: DIRECTION_LEFT,\r\n};\r\n\r\nconst startButton = document.querySelector('#start');\r\n\r\nstartButton.addEventListener('click', () => {\r\n  new Game($ctx, 50, [PLAYER1, PLAYER2]).startSimulation();\r\n  startButton.remove();\r\n});\r\n"]}